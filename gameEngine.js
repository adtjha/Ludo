/* 

Design the game engine here.
  
  game.play() : Starts the Ludo Game, from player 1. The first player to get a six, will be allowed to take out his piece.
  
  game.abort() : Ends the game, and stores the map inorder to restart the game next time.
  
GAME FUNCTIONS : 

Basic Functions that will be called during the game.

  1.  switchPlayer(): switches the current player to the next player.
  2.  rollDice(): generate a number between 0 to 6.
  3.  selectPiece(): select piece which the user wants to move.
  4.  movePiece():  move selected peice by 'n' number of steps, where n is the number generated by rollDice().
  5.  checkOthers(): check if other piece is present in that step, if not, goto 1. If present continue.
  
  *** after all the above steps, perform below task. ***

  6.  safeStep(): if the current Step is a safe step then, goto 1. If not continue.
  
  *** eliminating pieces and sending them back to home. ***
  
  7.  showChoice(): Show the currentUser choice to eliminate from the present pieces in that step.
  8.  sendPieceBack(): send the selected piece back to its home.
  
  9.  REPEAT THE PROCESS, TILL WINNER, OR GAME ABORTED.
  
*/

class Game {
  constructor(props){
    super();
    this.players = props.squares;
    this.currentIndex = 3;
    this.dice = props.dice;
    //Wait for User to select the piece.
    this.selectedPiece = {};
  }
  
  play(){
      //Switches the current Player.
      this.switchPlayer();
      this.dice.reset();
      
      //Wait for the user to roll the Dice.
      //this.rollDice();
      
      //Move the selected Piece.
      //this.movePiece(this.selectedPiece);
  }
  
  abort(){
    this.stop = true;
  }
  
  switchPlayer(){
    //switchPlayer(): switches the current player to the next player.
    this.currentIndex = this.players.findIndex(player => player.count === this.currentPlayer);
    if(this.currentIndex === 3){
      this.currentIndex = 0;
    } else {
      this.currentIndex++;
    }
    this.currentPlayer = this.players[this.currentIndex];
    super.update('switch', {count: this.currentPlayer});
  }
  
  rollDice(){
    //rollDice(): generate a number between 0 to 6.
    this.props.rollDice();
    return;
  }
  
  movePiece(selectedPiece){
    //selectPiece(): select piece which the user wants to move.
    //movePiece():  move selected peice by 'n' number of steps, where n is the number generated by rollDice().
    var currentStep = this.currentPlayer[selectedPiece].path.step,
        nextStep = currentStep++,
        nextStepObject = this.steps[nextStep];
  
    //check if other piece is present in that step, if not, goto 1. If present continue.
    if(!this.checkOthers(nextStepObject)){
      if(nextStepObject.safeStep){
        //if the current Step is a safe step then, goto 1. If not continue.
        this.currentPlayer[selectedPiece].path.step = nextStep;
      } else {
        //Show the currentUser choice to eliminate from the present pieces in that step.
        //send the selected piece back to its home.
        this.players[this.choice.player].piece[this.choice].position = -1;
        this.currentPlayer[selectedPiece].path.step = nextStep;
      }
    }  
  }
  
}